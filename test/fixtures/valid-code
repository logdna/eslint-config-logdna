'use strict'

// This is a very very long comment that should probably be on multiple line. But comments are ignored so this will not cause an error when the linter actually runs
const path = require('node:path')
const fs = require('fs')
const {promisify} = require('util')
const crypto = require('crypto')

const readFile = promisify(fs.readFile)
const EXP = /\d+/
const SLEEP_MS = 150

const LONG_STRING = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'
  + 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'
  + 'abcdefghijklmnopqrstuvwxyz'

const OPTIONS = {
  FOO: 1
, BAR: 2
, TEST: 'fake'
, LONG: LONG_STRING
, SLEEP_MS: SLEEP_MS
}

const isFoo = OPTIONS.FOO
  ? OPTIONS.BAR
  : OPTIONS.TEST

const {TEST, BAR: notUsed, ...others} = OPTIONS
function getOptions() {
  return isFoo ? OPTIONS : others
}

function rand(bytes = 10, cb) {
  crypto.randomBytes(bytes, (err, buffer) => {
    if (err) return cb(err)
    cb(null, buffer.toString('hex'))
  })
}

async function doWork(opts) {
  const {x, y} = opts
  try {
    const file = await readFile(path.join(x, y))
    return file
  } catch (err) {
    console.error(err)
    return null
  }
}

;(async () => {
  await new Promise((resolve) => {
    setTimeout(resolve, SLEEP_MS)
  })
  console.log('ready', 11 + 33)
})()

function plugin() {
  if (this.is_new) {
    this.id = Date.now()
  } else {
    this.updated = new Date()
  }
}

function useLotsOfParameters(
  a
, b
, c
) {
  console.log(a)
  console.log(b)
  console.log(c)
}

useLotsOfParameters(
  'here is some text'
, 'and some more text'
, 'and a third param of text'
)

useLotsOfParameters('this is', 'also valid', 'param usage')

useLotsOfParameters('a', 'b', {
  a: 'a'
, b: 'b'
})

useLotsOfParameters('a', 'b', (c) => {
  console.log(c)
})

const someArray = [1, 2, 3]
console.log(someArray.map((a) => { return a + 1 }))

module.exports = {
  ...OPTIONS
, EXP
, rand
, getOptions
, doWork
, plugin
}
